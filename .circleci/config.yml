version: 2.1

aliases:
  - &restore-yarn-cache
    restore_cache:
      name: Restore yarn cache
      key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn

  - &save-yarn-cache
    # Store the yarn cache globally for all lock files with this same
    # checksum. This will speed up the setup job for all PRs where the
    # lockfile is the same.
    name: Save yarn cache for future installs
    key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
    paths:
      - ~/.cache/yarn

  - &artifact_pptx
    path: ~/pptx-renderer/packages/renderer/pptx-renderer.min.js

  - &artifact_pptx_min
    path: ~/pptx-renderer/packages/renderer/pptx-renderer.min.js

   

executors:
  node-executor:
    docker:
      - image: cimg/node:current
    working_directory: ~/pptx-renderer
   

jobs:
  setup:
    executor: node-executor
    steps:
      - checkout
      - run:
            name: Nodejs Version
            command: node --version
      - *restore-yarn-cache
      - run:
          name: Install Packages
          command: yarn --immutable
      - run: yarn workspaces info | head -n -1 > workspace_info.txt
      - save_cache: *save-yarn-cache 
         
  test:
    executor: node-executor
    steps:
      - checkout
      - run: yarn workspaces info | head -n -1 > workspace_info.txt
      - *restore-yarn-cache
        # Builds babel-standalone with the regular Babel config
        # data for a JS file that's several megabytes large is bound to fail. Here,
        # we just run the babel-standalone test separately.
      - run: yarn test  --ci
      
  eslint:
     executor: node-executor
     steps:
      - checkout
      - run: yarn workspaces info | head -n -1 > workspace_info.txt
      - *restore-yarn-cache
      - run: yarn lint
      - save_cache: *save-yarn-cache


 

workflows:
  version: 2
  build_and_test: 
    jobs:
      - setup
      - eslint:
          requires:
            - setup
      - test:
          requires:
            - setup
